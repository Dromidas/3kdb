#CLASS draw {kill}
#CLASS draw {open}


#var draw[chat][active] on;
#var draw[chat][size] .3;
#var draw[map][active] on;
#var draw[map][position] top;
#var draw[map][size] .3;
#var draw[status][active] on;
#var draw[strategy][active] on;
#var draw[caption][active] on;
#var draw[hpbar][active] on;
#var draw[room][active] on;
#var draw[mobile][active] 0;

#list status_data clear;
#list caption_data clear;
#list strategy_data clear;

#NOP /* Pass 0-100 percentage number to split the current screen at. */
#alias {setsplit} {
    #math _perc {%1 * .01}; 
    #var map[widthperc] $_perc;
    #show \nSplit width percentage set to: %1\%;
    init_screen;
};

#NOP /* Calculate various area dimensions, called on start and SCREEN RESIZE */
#alias init_screen {
    #screen get rows screen[height];
    #screen get cols screen[width];

    #NOP -- If the screen width is less than 100, we can assume it's mobile so we'll draw differently;
    #NOP -- The map will reduce by 5 rows and the status window will be larger so items like;
    #NOP -- corpses don't get cutoff.;

    #if {$screen[width] < 100} {
        #var draw[mobile][active] 1;
    };

    #format chat[rows] {%d} {$screen[height] * $draw[chat][size]};
    #math chat[height] {$chat[rows] + 1};
    #math chat[rows] {$chat[rows] - 1};
    
    #format map[width] {%d} {$map[widthperc] * $screen[width]};
    #format map[height] {%d} {$draw[map][size] * $screen[height]};
    #math map[left] {$screen[width] - $map[width]};

    #if {$draw[mobile][active]} {
        #math map[height] {$map[height] - 4};
    };

    #if {"$draw[map][active]" == "on"} {
        #if {"$draw[map][position]" == "top"} {
            #var map[top] 2;
        } {
            #math map[top] {$chat[height] + 2};
        };
        #if {"$draw[room][active]" == "on"} {
            #math map[bottom] {$map[top] + $map[height] + 2};
        } {
            #math map[bottom] {$map[top] + $map[height]};
        };
        
    } {
        #var map[top] 0;
        #var map[bottom] 0;
    };

    
    #if {"$draw[hpbar][active]" == "on"} {
        #list {hpbar[prompt]} {size} {hpbar[height]};
    } {
        #var hpbar[height] 0;
    };

    #if {$draw[mobile][active]} {
        #math hpbar[height] {$hpbar[height] + 1};
    };

    #if {"$draw[chat][active]" == "on"} {
        #math chat[height] {$chat[rows] + 1};
        #if {"$draw[map][active]" == "on" && "$draw[map][position]" == "top"} {
            #math {chat[right]} {-$map[width]-1}
        } {
            #var chat[right] -1
        }
    } {
        #var chat[height] 0
    };

    #NOP -- The caption goes right below the map;
    #if {"$draw[caption][active]" == "on"} {
        #math caption[height] {&caption_data[] + 1};
        #math caption[top] {$map[bottom] + 2};
        #var caption[left] $map[left];
        #math caption[bottom] {$caption[top] + $caption[height]};
    } {
        #var caption[top] 0;
        #var caption[bottom] 0;
    };

    #if {$draw[mobile][active]} {
        #math caption[height] {$caption[height] + 2};
        #math caption[bottom] {$caption[top] + $caption[height]};
    };

    #NOP -- The status report goes right below the caption;
    #if {"$draw[status][active]" == "on"} {
        #math status[height] {&status_data[] + 1};
        #math status[top] {$caption[bottom] + 1};
        #math status[bottom] {$status[top] + $status[height]};
        #var status[left] $map[left];
    };

    #if {$draw[mobile][active]} {
        #math status[height] {$status[height] + 2};
        #math status[bottom] {$status[top] + $status[height]};
    };

    #NOP -- The strategy report goes right below the status and uses the remaining space;
    #if {"$draw[strategy][active]" == "on"} {
        #math strat[top] {$status[bottom] + 1};
        #math strat[height] {$screen[height] - $chat[height] - $map[height] - $caption[height] - $status[height]};
        #math strat[bottom] {$strat[top] + $strat[height]};
        #var strat[left] $map[left];
    } {
        #var strat[top] 0;
        #var strat[bottom] 0;
    };

    #if {$draw[mobile][active]} {
        #math strat[height] {$strat[height] + 2};
        #math strat[bottom] {$strat[top] + $strat[height]};
    };

    #NOP -- Clear any previous drawings;
    #screen clear split;
    #buffer end;

    #NOP -- If there is the chat window, split the # of rows required to display it;
    #if {"$draw[chat][active]" == "on"} {
        #math split[top] {$chat[height]};
    } {
        #var split[top] 0;
    };
    
    #math 	split[bottom]	{$hpbar[height] + 1};
    #var    split[left]     0;
    #var 	split[right]	{$map[width] + 1};

    #NOP -- The map room details goes right inside the map area;
    #math draw_room[top] {$map[bottom]};
    #math draw_room[left] {$map[left] + 2};
    
    
    #split 	$split[top] $split[bottom] $split[left] $split[right];

    init_map;
    init_hpbar;
    draw_all;
}



#alias draw_all {
    #if {"$draw[hpbar][active]" == "on"} { draw_hpbar };
    #if {"$draw[chat][active]" == "on"} { draw_chat };
    #if {"$draw[caption][active]" == "on"} { draw_caption };
    #if {"$draw[status][active]" == "on"} { draw_status };
    #if {"$draw[strategy][active]" == "on"} { draw_strategy };
    #if {"$draw[room][active]" == "on"} { draw_room };
};

#NOP /* calculate hpbar size and draws initial line above hpbar area */
#alias {init_hpbar} {
    #if {"$draw[hpbar][active]" == "on"} {
        #math hpbar[top] {$screen[height] - $hpbar[height]};
        #math hpbar[bottom] {$hpbar[top] + $hpbar[height] - 1};
        #math hpbar[right] {$hpbar[left] + $screen[width]}; 
    	#draw {line} -$hpbar[height]-2 1 -$hpbar[height]-2 -1;
    } {
        #var hpbar[height] 0;
    };
    tickhp;
};

#alias draw_hpbar {
    #loop 1 $hpbar[height] index {
        #var prompt $hpbar[prompt][+$index];
        #math hpbar_line {$hpbar[top] + $index - 1};
        #draw {<eeb>} {tile} $hpbar_line $hpbar[left] $hpbar_line -1 {$prompt};
    };
};

#NOP /* -- CAPTION (Idle timer, Corpses, etc) -- */
#alias draw_caption {

    #list caption_data clear;
    #list caption_data add {Idle: $idle_cap  <eaa>Deadmans: $deadManTimeLeft_cap};
    #list caption_data add {$corpse_string};
    #list caption_data add {$eternal_string};

    #nop -- Clear any old drawings;
    #draw {<dda>} {tile} $caption[top] $caption[left]+1 $caption[bottom] -1 {};

    #if {$idle_sec > $deadmanIdleTimeout} {
        #draw red rounded box $caption[top] $caption[left]+1 $caption[bottom] -1 $caption_data[1..$caption[height]];
    } {
        #draw green rounded box $caption[top] $caption[left]+1 $caption[bottom] -1 $caption_data[1..$caption[height]];
    };

    #math tempVar {&caption_data[] + 1};

    #if {$caption[height] != $tempVar} {init_screen};
};

#NOP /* -- Bot status -- */
#alias draw_status {

    #list status_data clear;

    #if $bot[active] {
        #path get length bot_total_rooms;
        #path get position bot_current_room;

        #math bot_current_room {$bot_current_room - 1};
        #math bot_progress {100 * $bot_current_room / $bot_total_rooms};

        #format {bot[report-time]} {%T} {};
        #math bot[delta-time] {$bot[report-time] - $bot[start-time]};
        #if {$bot[delta-time] > 3600} {
            #math bot[delta-time] {$bot[delta-time] / 3600 * 1.00};
            #math bot[delta-rate] {$bot[stats][xp] / $bot[delta-time]};
            thousandsFormatNumber bot[delta-rate];
            #var xp_rate_str $bot[delta-rate];
            #var xp_time_str $bot[delta-time] Hrs;
        } {
            #math bot[delta-time] {$bot[delta-time] / 60 * 1.00};
            #math bot[delta-rate] {$bot[stats][xp] * 60 / $bot[delta-time]};
            thousandsFormatNumber bot[delta-rate];
            #var xp_rate_str $bot[delta-rate];
            #var xp_time_str $bot[delta-time] mins;
        };
        #var temp_xp $bot[stats][xp];
        thousandsFormatNumber temp_xp;

        #if $bot[paused] {
            #list status_data add {<088>Bot Status  : <DAA><aaa> PAUSED <088>  $bot_current_room/$bot_total_rooms ($bot_progress% in $xp_time_str)};
        } {
            #list status_data add {<088>Bot Status  : <ACA><fff> ACTIVE <088>  $bot_current_room/$bot_total_rooms ($bot_progress% in $xp_time_str)};
        };

        #if $bot[playercheck] {
            #list status_data add {Playercheck : <ACA><fff>   ON   <088>};
        } {
            #list status_data add {Playercheck : <DAA><aaa>  OFF   <088>};
        };

        #list status_data add {Mobs Killed: $bot[stats][mobs]  XP Gained: $temp_xp  XP Rate/Hr: $xp_rate_str};

    } {
        #list status_data add {<088>Bot: <fff>OFF<088>};
    };

    #NOP - Update the size of the drawing based on the number of lines;
    #if {&status_data[] < $status[height]} {
        #math status[height] {&status_data[] + 1};
        #math status[bottom] {$status[top] + $status[height]};
    };

    #math tempVar {&status_data[] + 1};
    

    #nop -- Clear any old drawings;
    #draw {<dda>} {tile} $status[top] $status[left]+1 $status[bottom] -1 {};

    #if {$idle_sec > $deadmanIdleTimeout} {
        #draw red rounded box $status[top] $status[left]+1 $status[bottom] -1 $status_data[1..$status[height]];
    } {
        #draw green rounded box $status[top] $status[left]+1 $status[bottom] -1 $status_data[1..$status[height]];
    };

    #if {$status[height] != $tempVar} {init_screen};
};

#alias draw_strategy {

    #list strategy_data clear;
    #list strategy_data add {<bef>Strategy:<088>};

    #foreach *strategy[] index {
        #format strat_name {%-15s} {$index};
        #format strat_name {%n} {$strat_name};
        #if {$strategy[$index]} {
            #list strategy_data add {$strat_name : <afa>ON<088>};
        } {
            #list strategy_data add {$strat_name : <eaa>OFF<088>};
        };
    };

    #NOP - If there are less strategies than rows left, reduce the height.  Otherwise strategies will be listed;
    #NOP - until you reach the hpbar;

    #if {&strategy_data[] < $strat[height]} {
        #math strat[height] {&strategy_data[] + 1};
        #math strat[bottom] {$strat[top] + $strat[height]};
    };

    #NOP -- Clear old drawings;
    #draw {<dda>} {tile} $strat[top] $strat[left]+1 $strat[bottom] -1 {};

    #draw green rounded box $strat[top] $strat[left]+1 $strat[bottom] -1 $strategy_data[1..$strat[height]];

};

#NOP /* -- MAP -- */
#alias init_map {
    #if {"$draw[map][active]" == "on"} {
        #draw {tile} $map[top]-1 -$map[width] $map[bottom]+1 -1 {};
        #map offset $map[top] -$map[width]+2 $map[bottom]-1 -2;
        #map flag vtmap on;
        #if {"$draw[room][active]" == "on"} {
            #draw green rounded box $map[top]-1 -$map[width] $map[bottom]+1 -1;
        } {
            #draw green rounded box $map[top]-1 -$map[width] $map[bottom] -1;
        };
    } {
        #map flag vtmap off
    };
};

#NOP /* -- ROOM -- */
#alias draw_room {
    #nop -- Clear any old drawings;
    #draw {<dda>} {tile} $draw_room[top] $draw_room[left] $draw_room[top] -2 {};

    #nop NOTES from mapper;
    #map get roomname roomMapNameStr;
    #map get roomnote roomMapNoteStr;

    #draw {<dda>} {tile} $draw_room[top] $draw_room[left] $draw_room[top] -2 {Room Notes: $roomMapNoteStr};
};

#alias draw-map-side {
    #var draw[map][position] side;
    init_screen;
    draw_all;
};

#alias draw-map-top {
    #var draw[map][position] top;
    init_screen;
    draw_all
};

#EVENT {SCREEN RESIZE}
{
    init_screen;
    draw_all;
}

#NOP /* kick off */;
init_screen;
draw_all;

#CLASS draw {close}